#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
struct node
{
	int data;
	struct node *left;
	struct node *right;
};
struct node *root;
int len;
void append()
{
	struct node *temp;
	temp=(struct node*)malloc(sizeof(struct node));
	printf("emter node\n");
	scanf("%d",&temp->data);
	temp->left=NULL;
	temp->right=NULL;
	if(root==NULL)
	{
		root=temp;
	}
	else
	{
		struct node *p=root;
		while(p->right!=NULL)
		{
			p=p->right;
		}
		p->right=temp;
		temp->left=p;
	}
}
void display()
{
	struct node *temp=root;
	if(temp==NULL)
	{
		printf("list is empty\n");
	}
	else
	{
		while(temp!=NULL)
		{
			printf("%d->",temp->data);
			temp=temp->right;
		}
	}
}
int length()
{
	struct node *temp=root;
	int c=0;
	while(temp!=NULL)
	{
		c++;
		temp=temp->right;
	}
	return c;
}
void nth()
{
	struct node *temp=root,*p;
	int i,loc,r;
	printf("enter location\n");
	scanf("%d",&loc);
	r=length()-loc;
	i=length();
	while(temp->right!=NULL)
	{
		temp=temp->right;
	}
	p=temp;
	if(loc>length())
	{
		printf("invalid location\n");
	}
	else
	{
	
		while(i>loc)
		{
			p=p->left;
			i--;
		}
		printf("%d",p->data);
	}
}
int main()
{
	int ch;

	while(1)
	{
		printf("\n1.append\n");
		printf("2.length\n");
		printf("3.display\n");
		printf("4.nth\n");
		printf("5.exit\n");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:append();
					break;
			case 2:len = length();
					printf("len %d\n",len);
					break;
			case 3:display();
					break;
			case 4:nth();
					break;
			case 5:exit(1);
			default:printf("invalid operator");								
		}
	}
	return 0;
}